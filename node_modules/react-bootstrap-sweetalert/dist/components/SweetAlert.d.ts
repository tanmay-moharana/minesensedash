import React, { CSSProperties } from 'react';
import Buttons from './Buttons';
import Input from './Input';
export interface SweetAlertAnimationProps {
    name: string;
    duration?: number;
}
export interface SweetAlertOptionalPropsWithDefaults {
    allowEscape?: boolean;
    closeOnClickOutside?: boolean;
    inputType?: string;
    customClass?: string;
    validationMsg?: string;
    validationRegex?: RegExp;
    hideOverlay?: boolean;
    show?: boolean;
    required?: boolean;
    disabled?: boolean;
    focusConfirmBtn?: boolean;
    focusCancelBtn?: boolean;
    confirmBtnBsStyle?: string;
    cancelBtnBsStyle?: string;
    showCloseButton?: boolean;
    beforeMount?: Function;
    afterMount?: Function;
    beforeUpdate?: Function;
    afterUpdate?: Function;
    beforeUnmount?: Function;
    style?: CSSProperties;
    closeBtnStyle?: CSSProperties;
    timeout?: number;
    openAnim?: boolean | SweetAlertAnimationProps;
    closeAnim?: boolean | SweetAlertAnimationProps;
    reverseButtons?: boolean;
}
export declare type SweetAlertType = 'default' | 'secondary' | 'info' | 'success' | 'warning' | 'danger' | 'error' | 'input' | 'custom';
export interface SweetAlertOptionalProps extends SweetAlertOptionalPropsWithDefaults {
    type?: SweetAlertType;
    secondary?: boolean;
    info?: boolean;
    success?: boolean;
    warning?: boolean;
    danger?: boolean;
    error?: boolean;
    input?: boolean;
    custom?: boolean;
    onCancel?: Function;
    confirmBtnText?: React.ReactNode | string;
    confirmBtnCssClass?: string;
    confirmBtnStyle?: CSSProperties;
    cancelBtnText?: React.ReactNode | string;
    cancelBtnCssClass?: string;
    cancelBtnStyle?: CSSProperties;
    btnSize?: string;
    customIcon?: React.ReactNode | string;
    placeholder?: string;
    defaultValue?: string;
    showConfirm?: boolean;
    showCancel?: boolean;
    customButtons?: React.ReactNode;
}
export interface SweetAlertProps extends SweetAlertOptionalProps {
    title: React.ReactNode | string;
    onConfirm: Function;
}
declare type SweetAlertPropsTypes = {
    [key in keyof SweetAlertProps]: any;
};
export interface SweetAlertState {
    id: string;
    show: boolean;
    type?: SweetAlertType;
    focusConfirmBtn?: boolean;
    focusCancelBtn?: boolean;
    inputValue?: string;
    showValidationMessage?: boolean;
    timer?: any;
    animation?: string;
    prevTimeout?: number;
    hideTimeoutHandlerFunc?: Function;
    closingAction: 'confirm' | 'cancel';
}
export default class SweetAlert extends React.Component<SweetAlertProps, SweetAlertState> {
    static propTypes: SweetAlertPropsTypes;
    static defaultProps: SweetAlertOptionalPropsWithDefaults;
    static SuccessIcon: React.FunctionComponent<{}>;
    static ErrorIcon: React.FunctionComponent<{}>;
    static InfoIcon: React.FunctionComponent<{}>;
    static WarningIcon: () => JSX.Element;
    static CustomIcon: React.FunctionComponent<{
        iconUrl: string;
    }>;
    static Buttons: typeof Buttons;
    static Input: typeof Input;
    static ValidationMessage: React.FunctionComponent<SweetAlertProps>;
    static Title: React.FunctionComponent<{}>;
    static Content: React.FunctionComponent<{}>;
    state: SweetAlertState;
    constructor(props: SweetAlertProps);
    componentDidMount(): void;
    static generateId(): string;
    static getDefaultState(): SweetAlertState;
    static getDerivedStateFromProps(nextProps: SweetAlertProps, nextState: SweetAlertState): {};
    componentDidUpdate(prevProps: SweetAlertProps, prevState: SweetAlertState): void;
    componentWillUnmount(): void;
    hideTimeoutHandler(time: number): void;
    static handleTimeout(props: SweetAlertProps, currentTimer: any): {
        timer: any;
        prevTimeout: number;
    };
    static isAnimation(animProp?: boolean | SweetAlertAnimationProps): boolean;
    static animationFromProp(animProp: SweetAlertAnimationProps): string;
    static handleAnimState(props: SweetAlertProps, state: SweetAlertState, hideTimeout: Function): {
        show: boolean;
        animation: string;
    };
    static getStateFromProps: (props: SweetAlertProps) => {
        type: SweetAlertType;
        focusConfirmBtn: boolean;
        focusCancelBtn: boolean;
    };
    static getTypeFromProps: (props: SweetAlertProps) => SweetAlertType;
    unsupportedProp: (oldProp: string, message: string) => void;
    getIcon: () => React.ReactNode;
    onChangeInput: (e: React.ChangeEvent<Element>) => void;
    isValidInput: () => boolean;
    isDisabled: () => boolean;
    onAlertClose: (callback: () => void) => void;
    beforeCloseAlert: (closingAction: "cancel" | "confirm", callback: () => void) => void;
    onConfirm: (handleCloseAnimations?: boolean) => void;
    onCancel: (handleCloseAnimations?: boolean) => void;
    onInputKeyDown: (e: React.KeyboardEvent<Element>) => void;
    onKeyDown: (e: React.KeyboardEvent<Element>) => void;
    onClickInside: (e: React.MouseEvent<Element, MouseEvent>) => void;
    onClickOutside: () => void;
    render(): false | JSX.Element;
}
export {};
